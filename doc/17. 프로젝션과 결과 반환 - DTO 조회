┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
    프로젝션과 결과 반환 - DTO 조회
└────────────────────────────────────────────────────────────────────────────────────────────────────┘

    1. 순수 JPA에서 DTO 조회
        - 순수 JPA에서 DTO를 조회할 때는 new 명령어를 사용해야 함.
        - DTO의 package 이름을 다 적어줘야해서 지저분함
        - 생성자 방식만 지원

    [MemberDto]
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐

        @Data
        public class MemberDto {
            private String username;
            private int age;

            public MemberDto() {
            }

            public MemberDto(String username, int age) {
                this.username = username;
                this.age = age;
            }
        }

    └────────────────────────────────────────────────────────────────────────────────────────────────────┘

    [순수 JPA에서 DTO 조회 코드]
        - 결과를 DTO 반환할 때 사용 3 가지 방법 지원
            . 프로퍼티 접근- Setter
            . 필드 접근
            . 생성자 사용

    [프로퍼티 접근 - Setter]
        - DTO 기본 생성자 필요
        - DTO 의 Setter 필요
    ┌───────────────────────────────────────────────────────────────────────────────────────────────────┐

        List<MemberDto> fetch = queryFactory
                .select(
                        Projections.bean(MemberDto.class,
                                member.username,
                                member.age)
                )
                .from(member)
                .fetch();

        for (MemberDto member : fetch) {
            System.out.println("username = " + member.getUsername() + ", age = " + member.getUsername());
        }
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘

    [필드 직접 접근  ]
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        fetch = queryFactory
                .select(
                        Projections.fields(MemberDto.class,
                                member.username.as("username"),
                                member.age.as("age"))
                )
                .from(member)
                .fetch();
        for (MemberDto member : fetch) {
            System.out.println("username = " + member.getUsername() + ", age = " + member.getUsername());
        }
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘

    [생성자 접근  ]
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        // 생성자 접근
        fetch = queryFactory
                .select(
                        Projections.constructor(MemberDto.class,
                                member.username,
                                member.age)
                )
                .from(member)
                .fetch();

        for (MemberDto member : fetch) {
            System.out.println("username = " + member.getUsername() + ", age = " + member.getUsername());
        }
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘

    [ alias - 서브쿼리 및 필드]
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        QMember memberSub = new QMember("memberSub");
        List<MemberDto> fetch1 = queryFactory
                .select(
                        Projections.fields(MemberDto.class,
                                member.username.as("username"),

                                ExpressionUtils.as( JPAExpressions
                                                .select(memberSub.age.max())
                                                .from(memberSub)
                                                .from(member)
                                        , "age")
                        )
                )
                .from(member)
                .fetch();
        for (MemberDto memberDto : fetch1) {
            System.out.println("memberDto = " + memberDto);
        }
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘
