┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
    검색조건 쿼리
└────────────────────────────────────────────────────────────────────────────────────────────────────┘

    1.
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        Member findMember = query
                        .selectFrom(member)
                        .where(member.username.eq("member1")
                                .and(member.age.eq(10)))
                        .fetchOne();
        assertThat(findMember.getUsername()).isEqualTo("member1");
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘

    2. JPQL이 제공하는 모든 검색 조건 제공
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        member.username.eq("member1");          // username = 'member1'
        member.username.ne("member1");          // username != 'member1'
        member.username.eq("member1").not();    // username != 'member1'

        member.username.isNotNull();             // username is null

        member.age.in(10,20);                   // age in (10, 20)
        member.age.notIn(10,20)                 // age not in ( 10, 20 )
        member.age.between(10,30)               // between 10 and 20

        member.age.goe(30)                      // age >= 30
        member.age.gt(30)                       // age > 30
        member.age.loe(30)                      // age <= 30
        member.age.lt(30)                       // age < 30

        member.username.like("member%")         // username like "member%"
        member.username.contains("member")      // username like "%member%"
        member.username.startWith("member")     // username like "member%"

        ...
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘

    3. AND 조건으로 파라미터로 처리
        - .and 는 콤마(,) 구분의 파라미터로 처리 가능
        - null 이 들어가면 무시하기 때문에 동적쿼리에서 사용가능.
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        Member findMember = query
                .selectFrom(member)
                .where(
                        member.username.eq("member1")
                        , (member.age.eq(10))
                )
                .fetchOne();
        assertThat(findMember.getUsername()).isEqualTo("member1");
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘