┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
    SQL function 호출하기
└────────────────────────────────────────────────────────────────────────────────────────────────────┘

    SQL function은 JPA와 같이 Dialect에 등록된 내용만 호출 가능.

    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        List<String> fetch = queryFactory
                .select(
                        Expressions.stringTemplate("function('replace',{0}, {1}, {2})"
                                , member.username
                                , "member"
                                , "M")
                )
                .from(member)
                .fetch();
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        List<String> fetch = queryFactory
                .select(
                        member.username
                )
                .from(member)
                .where(member.username.eq(
                        Expressions.stringTemplate("function('lower',{0})",
                                member.username)
                ))
                .fetch();

        [SQL]
            select
                member0_.username as col_0_0_
            from
                member member0_
            where
                member0_.username=lower(member0_.username)

        [순수 Querydsl로 동일한 쿼리]
        List<String> fetch = queryFactory
                .select(
                        member.username
                )
                .from(member)
                .where(member.username.eq(member.username.toLowerCase()))
                .fetch();

    └────────────────────────────────────────────────────────────────────────────────────────────────────┘

