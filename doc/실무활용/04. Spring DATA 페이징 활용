┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
    Spring DATA 페이징 활용
└────────────────────────────────────────────────────────────────────────────────────────────────────┘
    - 스프링 데이터의 Page, Pageable 활용
    - 전체 카운트를 한번에 조회하는 단순한 방법
    - 데이터 내용과 전체 카운트를 별도로 조회하는 방법


    1. 사용자 정의 인터페이스에 페이징 2 가지 추가

    [MemberRepositoryCustom.java]
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        Page<MemberTeamDto> searchPageSimple(MemberSearchCondition dto, Pageable pageable);
        Page<MemberTeamDto> searchPageComplex(MemberSearchCondition dto, Pageable pageable);
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘

    [MemberRepositoryImpl.java]
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        @Override
        public Page<MemberTeamDto> searchPageSimple(MemberSearchCondition dto, Pageable pageable) {
            BooleanBuilder whereBuilder = whereBuilder(dto);

            QueryResults<MemberTeamDto> results = queryFactory
                    .select(
                            new QMemberTeamDto(
                                    member.id.as("memberId"),
                                    member.username,
                                    member.age,
                                    team.id.as("teamId"),
                                    team.name.as("teamName")
                            )
                    )
                    .from(member)
                    .join(member.team, team)
                    .where(whereBuilder)
                    .offset(pageable.getOffset())
                    .limit(pageable.getPageSize())
                    .fetchResults();

            List<MemberTeamDto> members = results.getResults();
            long total = results.getTotal();

            return new PageImpl<>(members, pageable, total);
        }


        @Override
        public Page<MemberTeamDto> searchPageComplex(MemberSearchCondition dto, Pageable pageable) {
            BooleanBuilder whereBuilder = whereBuilder(dto);

            List<MemberTeamDto> results = queryFactory
                    .select(
                            new QMemberTeamDto(
                                    member.id.as("memberId"),
                                    member.username,
                                    member.age,
                                    team.id.as("teamId"),
                                    team.name.as("teamName")
                            )
                    )
                    .from(member)
                    .join(member.team, team)
                    .where(whereBuilder)
                    .offset(pageable.getOffset())
                    .limit(pageable.getPageSize())
                    .fetch();

        /*
        Long total = queryFactory
                .select(member.count())
                .from(member)
                .join(member.team, team)
                .where(whereBuilder)
                .fetchOne();
        */

        JPAQuery<Long> countQuery = queryFactory
                .select(member.count())
                .from(member)
                .join(member.team, team)
                .where(whereBuilder);

        /*
            카운트 쿼리 생략가능한 경우
                - 페이지 시작이면서 컨텐츠 사이즈가 페이지 사이즈보다 작을 때,
                - 마지막 페이지 일때 (offset + 컨텐츠 사이즈를 더해서 천체 사이즈 구함 )

            PageableExecutionUtils.getPage(results, pageable, countQuery::fetchOne );
        */

        return PageableExecutionUtils.getPage(results, pageable, countQuery::fetchOne );
        //return PageableExecutionUtils.getPage(results, pageable, ()-> countQuery.fetchOne() );
        //return new PageImpl<>(results, pageable, total);
        }
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘

    [Tests]
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        @Test
        @DisplayName("페이징 테스트")
        void pagingSimpleTest()
        {
            MemberSearchCondition dto = new MemberSearchCondition();

            PageRequest pagable = PageRequest.of(0, 3);

            //Page<MemberTeamDto> page = memberRepository.searchPageSimple(dto, pagable);
            Page<MemberTeamDto> page = memberRepository.searchPageComplex(dto, pagable)

            List<MemberTeamDto> content = page.getContent();
            System.out.println("totalElements = " + page.getTotalElements());
            System.out.println("totalPages = " + page.getTotalPages());
            System.out.println("number = " + page.getNumber());
            for (MemberTeamDto memberTeamDto : content) {
                System.out.println("memberTeamDto = " + memberTeamDto);
            }
        }
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘
