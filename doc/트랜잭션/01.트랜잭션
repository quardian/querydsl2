┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
	스프링의 트랜잭션 서비스 추상화
└────────────────────────────────────────────────────────────────────────────────────────────────────┘

	- 스프링이 제공하는 트랜잭션 추상화 계층구조
								┌──────────────────────────────┐
								│	UserService  			   │
								└───────────────┬──────────────┘
	┌───────────────────────────────────────────────────────────────────────────────────────────────┐
	│											▼													│
	│							┌──────────────────────────────┐  									│
	│							│		<<interface>>		   │                                    │
	│							│ 	PlatformTransactionManager │                                    │
	│							└──────────────────────────────┘                                    │
	│											△                                                   │
	│											|                                                   │
	│				┌---------------------------┴---------------------------┐                       │
	│				|							|							|                       │
	│	┌───────────┴─────────────┐	┌───────────┴─────────────┐	┌───────────┴─────────────┐         │
	│	│	DataSourceTxManager   │	│	JtaSourceTxManager    │ │	HibernateTxManager    │		    │
	│	└─────────────────────────┘	└─────────────────────────┘	└─────────────────────────┘	        │
	└───────────────────────────────────────────────────────────────────────────────────────────────┘
					│							│							│
					▼							▼							▼
		┌─────────────────────────┐	┌─────────────────────────┐	┌─────────────────────────┐
		│	JDBC/Connection	      │	│	JTA/UserTransaction   │ │  Hibernate/Transaction  │
		└─────────────────────────┘	└─────────────────────────┘	└─────────────────────────┘

    - 스프링이 제공하는 트랜잭션 추상화 방법을 UserService에 적용해보면 아래와 같은 코드로 만들 수 있다.
	┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        public void upgradeLevels() {
            PlatformTransactionManager transactionManager = new DataSourceTransactionManager(dataSource);
			TransactionStatus status =
				transactionManager.getTransaction( new DefaultTransactionDefinition() ); // <= 트랜잭션 시작?
			try{

			    // 트랜잭션 작업 시작
				List<User> users = userDao.getAll();
				for ( User user : users ) {
				    if ( canUpgradeLevel(user) ){
				        upgradeLevel(user);
				    }
				}
				// 트랜잭션 작업 종료

				transactionManager.commit(status);		// <== 트랜잭션 커밋
			} catch (RuntimeException e){
				transactionManager.rollback(status);	// <== 트랜잭션 롤백
			}
        }
	└────────────────────────────────────────────────────────────────────────────────────────────────────┘
    - 스프링이 제공하는 트랜잭션 경계설정을 위한 추상 인터페이스는 PlatformTransactionManager 이다.
    - JDBC의 로컬 트랜잭션을 이용한다면 PlatformTransactionManager를 구현한
      DataSourceTransactionManager 를 사용하면 된다.
      사용할 DB의 DataSource 를 생성자 파라미터로 넣으면서 DataSourceTransactionManager 오브젝트를 만든다.
    - JDBC를 이용하는 경우에는 먼저 Connection을 생성하고 나서 트랜잭션을 시작했지만,
      PlatformTransactionManager에서는 트랜잭션을 가져오는 요청인 getTransaction() 메소드를 호출하기만 하면 된다.
      (필요에 따라 트랜잭션 매니저가 DB 커넥션을 가져오는 작업도 같이 수행해주기 때문이다.)
    - 여기서 트랜잭션을 갖어 온다는 것은 트랜ㅈ잭션을 시작한다는 의미로 생각하자.
    - 시작된 트랜잭션은 TransactionStatus 타입의 변수에 저장된다.
      TransactionStatus는 트랜잭션에 대한 조작이 필요할 때 PlatformTransactionManager 메소드에 파라미터로 전달해주면 된다.

    - 트랜잭션이 시작됐으니 이제 JdbcTemplate을 상요하는 DAO를 이용하는 작업을 진행한다.
    - DataSourceTransactionManager 오보젝트는 JdbcTemplate에서 사용될 수 있는 방식으로 트랜잭션을 관리해준다.

    - 트랜잭션 작업을 모두 수행한 후에 트랜잭션을 만들 때 돌려받은 TransationStatus 오브젝트를 파라미터로 해서
      PlatformTransactionManager의 commit() 메소드를 호출하고, 예외 발생시 rollback() 메소드를 호출한다.

    [트랜잭션 기술 설정의 분리]

    - 스프링이 제공하는 모든 PlatformTransactionManager의 구현 클래스는 멀티쓰레드에서도 싱글톤으로 사용이 가능하다.

    - 구현체에 따른 PlatformTransactionManager 변경
        PlatformTransactionManager txManager = new JtaTransactionManager();
        PlatformTransactionManager txManager = new HibernateTransactionManager();
        PlatformTransactionManager txManager = new JpaTransactionManager();

    - PlatformTransactionManager 인터페이스 타입의 DI 가능
      관례적으로 변수명은 transationManager 사용.

┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
	PlatformTransactionManager
└────────────────────────────────────────────────────────────────────────────────────────────────────┘
    - 스프링 트랜잭션 추상화의 핵심 인터페이스 이다.
    - PlatformTransactionManager 인터페이스는 3 개의 메소드를 갖는다.
    ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
        public interface TransactionManager { }

    	public interface PlatformTransactionManager extends TransactionManager {

    		TransactionStatus getTransaction(@Nullable TransactionDefinition definition)
        			throws TransactionException;

        	void commit(TransactionStatus status) throws TransactionException;

        	void rollback(TransactionStatus status) throws TransactionException;
        }
    └────────────────────────────────────────────────────────────────────────────────────────────────────┘
    - PlatformTransactionManager 은 트랜잭션 경계를 지정하는 데 사용된다.
    - 트랜잭션 경계의 시작은 getTransaction() 메소드를 사용한다.
    - TransactionDefinition은 트랜잭션의 네 가지 속성을 나타내는 인터페이스이다.
      (propagationBehavior, isolationLevel, timeout, readOnly)
    - TransactionStatus 는 현재 참여하고 있는 트랜잭션의 ID와 구분정보를 담고 있다.


┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
	트랜잭션 매니저의 종류
└────────────────────────────────────────────────────────────────────────────────────────────────────┘
    - 스프링이 제공하는 PlatformTransactionManager 구현 클래스들

    1. DataSourceTransactionManager
        . Connection의 트랜잭션 API를 이용해서 트랜잭션을 관리해주는 트랜잭션 매니저다.
        . 트랜잭션을 적용할 DataSource가 스프링의 빈으로 등록돼야 한다.
        . JDBC API를 이용해서 트랜잭션을 관리하는 데이터 엑세스 기술인
          JDBC, myBatis SqlMap 으로 만든 DAO에 적용할 수 있다.
        . DataSourceTransactionManage가 사용할 DataSource는 getConnection() 이
          호출될 때마다 매번 새로운 Connection을 돌려줘야 한다.
          ThreadLocal 등을 이용해 트랜잭션을 저장해두고 돌려주는 특별한 기능을 가진
          DataSource를 사용하면 안된다.
        . 애플리케이션 코드에서 트랜잭션 매니저가 관리하는 Connection을 가져오려면
          DataSource의 getConnection() 대신
          스프링 DataSourceUtils.getConnection(DataSource)를 사용해야 한다.


    2. JpaTransactionManager
        . JPA를 이용하는 DAO에는 JpaTransactionManager를 사용한다.
          (물론 JTA로 트랜잭션 서비스를 이용하는 경우에는 JpaTransactionManager가 필요없다)
        . JpaTransactionManager를 사용할 때는 JPA의 persistence.xml 파일의
          <persistence-unit> 태그 내의 transaction-type을 JTA로 설정해두지 않도록 한다.
        . 스프링이 제공하는 JpaTransactionManager를 사용할 것이므로 transaction-type 은 생략한다.
        . JpaTransactionManager는 DataSourceTransactionManager가 제공하는
          DataSource 레벨의 트랜잭션 관리 기능을 동시에 제공한다.
          따라서 JpaTransactionManager를 사용하면서 동시에 트랜잭션이 적용된
          JDBC DAO를 사용할 수 있다.

    3. HibernateTransactionManager
        . 하이버네이트 DAO에는 HibernateTransactionManager를 사용한다.
        . 아래와 같이 SessionFactory 타입의 빈을 프로퍼티로 넣어주면 된다.
        ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
            <bean id="sessionFactory"
                class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
                ..
            </bean>
            <bean id="transactionManager"
                class="orm.springframework.orm.hibernate3.HibernateTransactionManager">
                <property name="sessionFactory" ref="sessionFactory" />
            </bean>
        └────────────────────────────────────────────────────────────────────────────────────────────────────┘

    4. JmsTransactionManager , CciTransactionManager
        . 스프링은 DB 뿐 아니라 트랜잭션이 지원되는 JMS와 CCI를 위해서도 트랜잭션 매니저를 제공한다.

    5. JtaTransactionManager
        . 하나 이상의 DB 또는 트랜잭션 리소스가 참여하는 글로벌 트랜잭션을 적용하려면 JTA를 이용해야 한다.
        . JTA는 여러 개의 트랜잭션 리소스(DB, JMS등)에 대한 작업을 하나의 트랜잭션으로 묶을 수 있고
          여러 대의 서버에 분산되어 진행되는 작업을 트랜잭션으로 연결해 주기도 한다.
        . JTA 트랜잭션을 이용하려면 트랜잭션 서비스를 제공하는 WAS를 이용하거나
          독립 JTA 서비스를 제공해주는 프레임워크를 사용해야 한다.
        . 서버가 제공하는 JTA 트랜잭션 매니저를 스프링에서 이용하는 방법은 간단한다.
          다음과 같이 JtaTransactionManager를 등록해주기만 하면 된다.
        ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
            <bean id="transactionManager"
                class="orm.springframework.transaction.jta.JtaTransactionManager">
                <property name="transactionManagerName" value="" />
                <property name="userTransactionName" value="" />
            </bean>
        └────────────────────────────────────────────────────────────────────────────────────────────────────┘
        . 프로퍼티 설정 없이 JtaTransactionManager를 등록하면 디폴트로 등록된 JNDI 이름을 통해
          서버의 TransactionManager와 UserTransaction을 찾는다.
          - 기본 UserTransaction   JNDI 이름 : java:comp/UserTransaction
          - 기본 TransactionManger JNDI 이름 : java:comp/TransactionManager,
                                              java:appserver/TransactionManager,
                                              java:pm/TransactionManager
                                              java:/TransactionManager
            이렇게 4 가지 이다.
          - 만약 디폴트 이름과 다르게 서버에 설정되어 있다면
            transactionManagerName과 userTransactionName 프로퍼티를 통해 이름을 지정해주면 된다.

        . DB가 하나라면 트랜잭션 매니저 또한 하나만 등록돼야 한다.
        . DB가 여러 개라도 JTA를 이용해 글로벌 트랜잭션을 적용할 것이라면 JtaTransactionManager
          하나만 등록돼야 한다.
        . 단, 두 개 이상의 DB를 완전히 독립적으로 사용하는 경우라면 두 개 이상의 트랜잭션 매니저 등록이 가능하다.
          DB가 두 개라면 DataSource도 두 개가 등록 되야하고, DAO도 두 개가 등록돼야 한다.
          (DAO는 어떤 식으로든 DataSource와 연결되기 때문이다 )


┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
	트랜잭션 경계설정 전략
└────────────────────────────────────────────────────────────────────────────────────────────────────┘
    1. 코드에 의한 트랜잭션 경계설정
        - 아래 예제의 MemberDao는 JDBC, iBatis, JPA, Hibernate 중 어떤 것을 이용해도 된다.
        ┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
            public class MemberService{
                @Autowired private MemberDao memberDao;
                private TransactionTemplate transactionTemplate;

                @Autowired
                public void init(PlatformTransactionManager transactionManager){
                    this.transactionTemplate = new TransactionTemplate(transactionManager);
                }

                public void addMember(final List<Member> members){
                    this.transactionTemplate.execute( new TransactionCallback {
                        public Object doIntransaction(TransactionStatus status){
                            for(Member m : members){
                                memberDao.addMember(m);
                            }
                            return null; // 정상적으로 마치고 리턴되면 트랜잭션 커밋된다.
                                         // 만일, 이전 트랜잭션에 참여했다면 해당 트랜잭션의 작ㅇ버을 모두 마칠 때까지 커밋은 보류된다.
                                         // 리턴되기 이전에 예외가 발생하면 트랜잭션은 롤백된다.
                        }
                    });
                }

            }
        └────────────────────────────────────────────────────────────────────────────────────────────────────┘

    2. 선언적 트랜잭션 경계설정
        - 선언적 트랜잭션을 이용하면 코드에는 전혀 영향을 주지 않으면서 특정 메소드 실행 전후에 트랜잭션이 시작되고 종료되거나
          기존 트랜잭션에 참여하도록 만들 수 있다.
        - 선언적 트랜잭션 경계설정은 트랜잭션 프록시 빈 덕분에 가능한 것이다.

        1) aop와 tx 네임스페이스
            . 내용 스킵

        2) @Transactional
            . 트랜잭션 AOP를 적용하는 두 번째 방법은 @Transactional 애토네이션을 이용하는 것이다.
            . 트랜잭션이 적용될 타깃 인터페이스나 클래스, 메소드 등에 어노태이션을 부여해서 트랜잭셩 대상을 지정하고 속성을 제공한다.
            .

┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
	트랜잭션 속성
└────────────────────────────────────────────────────────────────────────────────────────────────────┘

	- PlatformTransactionManager
	- DefaultTransactionDefinition

	[트랜잭션 경게설정 코드]
	┌────────────────────────────────────────────────────────────────────────────────────────────────────┐
		public Object invoke(MethodInvocation invocation) throws Throwable {
			TransactionStatus status =
				this.transactionManager.getTransaction( new DefaultTransactionDefinition() ); // <= 트랜잭션 시작?
			try{
				Object ret = invocation.proceed();
				this.transactionManager.commit(status);		// <== 트랜잭션 종료

			} catch (RuntimeException e){
				this.transactionManager.rollback(status);	// <== 트랜잭션 종료
			}
		}
	└────────────────────────────────────────────────────────────────────────────────────────────────────┘

1. 트랜잭션 정의

	- 트랜잭션 경계 안에서 진행된 작업은 commit()을 통해 모두 성공 하든지 아니면, rollback()을 통해 모두 취소 돼야 한다.
	  그런데 이 밖에도 트랜잭션의 동작방식을 제어할 수 있는 몇가지 조건이 있다.
	- DefaultTransactionDefinition이 구현하고 있는 TransactionDefinition 인터페이스는 트랙잭션의 동작방식에 영향을 줄 수 있는 네 가지 속성을 저의한다.

	[ 트랜잭션 전파 ]
		- 트랜잭션 전파(transation propagation)란 트랜잭션의 경계에서 이미 진행 중인 트랜잭션이 있을 때
		  또는 없을 때 어떻게 동작할 것인지를 결정하는 방식을 말한다.

		- 아래 그림의 트랜잭션 전파와 같이 각각 독립적인 트랜잭션 경계를 가진 두 개의 코드가 있다고 하자.
			┌─────────────────────────────────────────┐
				A						B
				트랜잭션 시작			┌──	트랜잭션 시작
				...(1)		 		│	...
				B.method()	────────┤	...
				...(2)				│	...
				트랜잭션 종료			└──	트랜잭션 종료
			└─────────────────────────────────────────┘
		- 트랜잭션 A 가 시작되고 아직 끝나지 않은 시점에서 B를 호출했다면 B의 코드는 어떤 트랜잭션 안에서 동작해야 할까?

		- 시나리오 1) A에서 트랜잭션이 사작돼서 진행 중이라면 B의 코드는 새로운 트랙션을 만들지 않고 A의 트랜잭션에 참여.
			. 이 경우, B를 호출한 작업까지 마치고 (2)의 코드 진행 중 예외가 발생했다 하자.
			. 이러한 경우에는 A와 B의 코드에서 진행했던 모든 DB 작업이 다 취소 된다. (A와 B가 하나의 트랜잭션으로 묶였기 때문)

		- 시나리오 2) B의 트랜잭션은 이미 앞에서 시작한 A의 트랜잭션과 무관하게 독립적인 트랙잭션 생성.
			. 이 경우 B의 트랜잭션 경계를 빠져나오는 순간 B의 트랜잭션은 독자적으로 커및 또는 롤백 됨.
			. A 트랜잭션은 그에 영향을 받지 않고 진행된다.
			. 만약 (2)에서 예외가 발생해서 A의 트랜잭션이 롤밸되는 경우에라도 B에서는 이미 종료된 트랜잭션의 결과에는 영향을 주지 않는다.

2. 트랜잭션 전파속성 (propagation)

	1) PROPAGATION_REQUIRED
	────────────────────────────────────
		- 기본값 이다.
			. 진행 중인 트랜잭션이 없으면 : 새로 생성.
			. 진행 중인 트랜잭션이 있으면 : 이미 시작된 트랜잭션에 참여.

		- A,B 모두 PROPAGATION_REQUIRED로 선언되어 있다면,
			. A, B, A->B, B->A 와 같은 네 가지의 조합된 트랜잭션이 모두 가능.

		- DefaultTransactionDefinition의 트랜잭션 전파 속성은 바로 이 PROPAGATION_REQUIRED 다.

	2) PROPAGATION_SUPPORTS
	────────────────────────────────────
        . 진행 중인 트랜잭션이 없으면 : 트랜잭션 없이 진행
        . 진행 중인 트랜잭션이 있으면 : 이미 시작된 트랜잭션에 참여.

	3) PROPAGATION_MANDATORY
	────────────────────────────────────
        . 진행 중인 트랜잭션이 없으면 : 트랜잭션 없으면 예외 발생
        . 진행 중인 트랜잭션이 있으면 : 이미 시작된 트랜잭션에 참여.

	4) PROPAGATION_REQUIRES_NEW
	────────────────────────────────────
		- 항상 새로운 트랜잭션을 시작한다.
		  즉, 앞에서 시작된 트랜잭션이 있든 없든 상관없이 새로운 트랜잭션을 만들어서 독자적으로 동작하게 한다.
		- 독립된 트랜잭션이 보장돼야 하는 코드에 적용
		. 진행 중인 트랜잭션이 있으면 : 트랜잭션을 잠시 보류 시킨다.

	5) PROPAGATION_NOT_SUPPORTED
	────────────────────────────────────
		- 트랜잭션 없이 동작하도록 만든다.
		- 진행 중인 트랜잭션이 있으면 보류 시킨다.
		- 이게 필요한 이유는 트랜잭션 경계설정은 보통 AOP를 이용해 한 번에 많은 메소드에 동시에 적용하는 방법을 사용한다.
		  이때 특정 메소드만 트랜잭션 적용에서 제외하려면 어떻게 해야 할까?
		  이런 경우처럼 모든 메소드에 트랜잭션 AOP가 적용되게 하고, 특정 메소드의 트랜잭션 전파 속성만 PROPAGATION_NOT_SUPPORTED로
		  설정해서 트랜잭션 없이 동작하게 만들 수 있다.

	6) PROPAGATION_NEVER
	────────────────────────────────────
	    - 트랜잭션을 사용하지 않게 한다.
	    - 진행 중인 트랜잭션이 있으면 보류 시킨다.

	7) PROPAGATION_NESTED
	────────────────────────────────────
        . 진행 중인 트랜잭션이 없으면 :
        . 진행 중인 트랜잭션이 있으면 : 중첩 트랜잭션을 시작한다. (트랜잭션 안에 다시 트랜잭션 만듬.)
            중첩된 트랜잭션은 먼저 시작된 부모 트랜잭션의 커밋과 롤백에는 영향을 받지만
            자신의 커밋과 롤백은 부모 트랜잭션에게 영향을 주지 않는다.
            (중첩은 실패해도, 메인은 정상 실행되나, 메인이 실패하면 중첩도 같이 롤백된다)



3. 격리수준 (isolation level)

	- 모든 DB 트랜잭션은 격리수준(isolation level)을 갖고 있어야 한다.
	- 격리수준은 기본적으로 DB에 설정되어 있지만 JDBC 드라이버나 DataSource 등에서 재성할 할 수 있고,
	  필요하다면 트랜잭션 단위로 격리수준을 조정할 수 있다.
	- DefaultTransactionDefinition에 설정된 격리수준은 ISOLATION_DEFAUALT 다.
	  (DataSource에 설정되어 있는 디폴트 격리수준을 그대로 따른다는 의미 )
	- 기본적으로 DB나 DataSource에 설정된 기본 격리수준을 따르는 편이 좋지만, 특별한 작업을 수행하는 메소드의 경우 독자적 격리수준 지정이 필요가 있다.

    1) ISOLATION_DEFAULT
        - 사용하는 데이터 엑세스 기술 또는 DB 드라이버의 디폴트 설정을 따른다.
        - 대부분의 DB는 READ_COMMITTED 를 기본 격리수준으로 갖는다.
    2) ISOLATION_READ_UNCOMMITTED
        - 가장 낮은 격리수준이다.
        - 하나의 트랜잭션이 커밋되기 전에 그 변화가 다른 트랜잭션에 그대로 노출되는 문제가 있다.
          (데이터의 일관성 유지가 중요하지 않을 때, 가장 빠르고 성능 최적화 의도로 사용 가능 )
    3) ISOLATION_READ_COMMITTED
        - 가장 많이 사용되는 격리수준.
        - 다른 트랜잭션이 커밋하지 않은 정보는 읽을 수 없다.
          대신 하나의 트랜잭션이 읽은 로우를 다른 트랜잭션이 수정할 수 있다.
          ( 이 때문에 처음 트랜잭션이 같은 로우를 다시 읽을 경우 다른 내용이 발견될 수 있다 )
    4) ISOLATION_REPEATABLE_READ
        - 하나의 트랜잭션이 읽은 로우를 다른 트랜잭션이 수정하는 것을 막아준다.
        - 하지만 새로운 로우를 추가하는 것은 제한하지 않는다.
    5) ISOLATION_SERIALIZABLE
        - 가장 강력한 트랜잭션 격리수준
        - 이름 그대로, 트랜잭션을 순차적으로 진행시켜주기 때문에 동시에 같은 테이블의 ㅈ어보를 엑세스하지 못한다.
          가장 안전하지만 가장 성능이 떨어지기 때문에 극단적 안전한 작업이 필요한 경우 아니면 거의 사용되지 않는다.


4. 제한시간 (timeout)

	- 트랜잭션을 수행하는 제한시간(timeout)을 설정할 수 있다.
	- DefaultTransactionDefinition의 기본설정은 제한시간이 없다.
	- 제한시간은 트랜잭션을 직접 시작할 수 있는 PROPAGATION_REQUIRED, PROPAGATION_REQUIRES_NEW와 함께 사용해야만 의미가 있다.

5. 읽기전용 (read only)

	- 읽기전용으로 설정해두면 트랜잭션 내에서 데이터 조작 시도를 막을 수 있다. 또는 데이터 엑세스 기술에 따라서 성능이 향상될 수도 있다.
	- TransactionDefinition 타입 오브젝트를 사용하면 네 가지 속성을 이용해서 트랜잭션의 동작방식을 제어할 수 있다.

6. 트랜잭션 롤백 예외 : rollback-for, rollbackFor, rollbackForClassName
    - 선언적 트랜잭션에서는 런타임 예외가 발생하면 롤백한다.
    - 반면 예외가 전혀 발생하지 않거나, 체크 예외가 발생하면 커밋한다.
    - 체크 예외를 커밋 대상으로 삼은 이유는 체크 예외가 예외적인 상황에서 사용되기 보다는 리턴 값을 대신해서
      비지니스적인 의미를 담은 결과를 돌려주는 용도로 많이 사용되기 때문이다.

    예) 체크 예외이지만 Rollback 대상으로 삼아야 한다면, 대상을 지정해 준다.
        @Transactional(readOnly=true, rollbackFor=NoSuchMemberException.class)

7. 트랜잭션 커밋 예외 : no-rollback-for, noRollbackFor, noRollbackForClassName
    - 기본적으로는 롤백 대상인 런타임 예외를 트랜잭션 키밋 대상으로 지정해준다.


